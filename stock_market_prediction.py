# -*- coding: utf-8 -*-
"""stock_market_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/TejParmar10/stock_market_prediction/blob/main/stock_market_prediction.ipynb
"""

import pandas as pd
import pandas_datareader as pdr
import numpy as np
url='https://raw.githubusercontent.com/mwitiderrick/stockprice/master/NSE-TATAGLOBAL.csv'
data= pd.read_csv(
    url,
    sep=',',
    encoding='utf-8',
)
print(data)
data.isna().any()

df=pdr.get_data_tiingo('AAPL',api_key='b8ff655b05592100b3894dcd2b7efcc2ad825a74')

!pip install pandas_datareader
import pandas_datareader as pdr

api_key = 'b8ff655b05592100b3894dcd2b7efcc2ad825a74'

df.to_csv('AAPL.csv')

import pandas as pd
df=pd.read_csv('AAPL.csv')
df.head()

df1=df.reset_index()['close']

df1.shape

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler(feature_range=(0,1))
df1=scaler.fit_transform(np.array(df1).reshape(-1,1))

training_size=int(len(df1)*0.65)
test_size=len(df1)-training_size
train_data,test_data=df1[0:training_size,:],df1[training_size:len(df1),:1]

def create_dataset(dataset,time_step=1):
  dataX,dataY=[],[]
  for i in range(len(dataset)-time_step-1):
    a=dataset[i:(i+time_step),0]
    dataX.append(a)
    dataY.append(dataset[i+ time_step,0])
  return np.array(dataX),np.array(dataY)

time_step=100
X_train,Y_train=create_dataset(train_data,time_step)
X_test,Y_test=create_dataset(test_data,time_step)

X_train=X_train.reshape(X_train.shape[0],X_train.shape[1],1)
X_test=X_test.reshape(X_test.shape[0],X_test.shape[1],1)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM

model=Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(100,1)))
model.add(LSTM(50,return_sequences=True))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss='mean_squared_error',optimizer='adam')

model.summary()

model.fit(X_train,Y_train,validation_data=(X_test,Y_test),epochs=100,batch_size=64,verbose=1)

train_predict=model.predict(X_train)
test_predict=model.predict(X_test)

train_predict=scaler.inverse_transform(train_predict)
test_predict=scaler.inverse_transform(test_predict)

import math
from sklearn.metrics import mean_squared_error
math.sqrt(mean_squared_error(Y_train,train_predict))

math.sqrt(mean_squared_error(Y_test,test_predict))

import matplotlib.pyplot as plt
look_back=100
trainPredictplot=np.empty_like(df1)
trainPredictplot[:, :]=np.nan
trainPredictplot[look_back:len(train_predict)+look_back,:]=train_predict
testPredictplot=np.empty_like(df1)
testPredictplot[: , :]=np.nan
testPredictplot[len(train_predict)+(look_back*2)+1:len(df1)-1,:]=test_predict
plt.plot(scaler.inverse_transform(df1))
plt.plot(trainPredictplot)
plt.plot(testPredictplot)
plt.show()

x_input=test_data[341:].reshape(1,-1)
x_input.shape

temp_input=list(x_input)
temp_input=temp_input[0].tolist()

lst_output=[]
n_steps=100
i=0
while(i<30):
  if(len(temp_input)>100):
    x_input=np.array(temp_input[1:])
    print("{} day input {}".format(i,x_input))
    x_input=x_input.reshape(1,-1)
    x_input=x_input.reshape((1,n_steps,1))
    yhat=model.predict(x_input,verbose=0)
    print("{} day output {}".format(i,yhat))
    temp_input.extend(yhat[0].tolist())
    temp_input=temp_input[1:]
    lst_output.extend(yhat.tolist())
    i=i+1
  else:
    x_input=x_input.reshape((1,n_steps,1))
    yhat=model.predict(x_input,verbose=0)
    print(yhat[0])
    temp_input.extend(yhat[0].tolist())
    print(len(temp_input))
    lst_output.extend(yhat.tolist())
    i=i+1
print(lst_output)

day_new=np.arange(1,101)
day_pred=np.arange(101,131)

df3=df1.tolist()
df3.extend(lst_output)

plt.plot(day_new,scale.inverse_transform(df1))





